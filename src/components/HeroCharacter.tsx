import { useState } from 'react';
import AnimatedCharacter from '@/components/AnimatedCharacter';
import EditableContent from '@/components/EditableContent';
import { useEditMode } from '@/components/EditModeContext';

interface HeroCharacterProps {
  type: 'ant' | 'turtle';
  message: string;
  onMessageChange: (value: string) => void;
  size?: number;
  mirrored?: boolean;
}

const motivationalPhrases = {
  ant: [
    'üí° –ü—Ä–∏–≤–µ—Ç! –Ø –ú—É—Ä–∞–≤—å–∏—à–∫–∞ –í–æ–ø—Ä–æ—Å–∏–∫. –õ—é–±–ª—é –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ —É–∑–Ω–∞–≤–∞—Ç—å –Ω–æ–≤–æ–µ!',
    'üåü –î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ –æ—Ç–∫—Ä–æ–µ–º —Ç–∞–π–Ω—ã –ø—Ä–∏—Ä–æ–¥—ã!',
    'üöÄ –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –æ—Ç–∫—Ä—ã—Ç–∏—è–º? –ü–æ–µ—Ö–∞–ª–∏!',
    'üéØ –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å - —ç—Ç–æ —à–∞–≥ –∫ –∑–Ω–∞–Ω–∏—è–º!',
    '‚ö° –õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ - –º–æ–π –≥–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–∞—Å!',
    'üåà –í –ø—Ä–∏—Ä–æ–¥–µ —Å—Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ!'
  ],
  turtle: [
    'üéì –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –Ø –ú—É–¥—Ä–∞—è –ß–µ—Ä–µ–ø–∞—Ö–∞. –ü–æ–º–æ–≥—É —Ç–µ–±–µ —É—á–∏—Ç—å—Å—è —Ç–µ—Ä–ø–µ–ª–∏–≤–æ!',
    'üìö –ó–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∫ —Ç–µ–º, –∫—Ç–æ —É–ø–æ—Ä–µ–Ω!',
    'üåü –ì–ª–∞–≤–Ω–æ–µ - –Ω–µ —Å–ø–µ—à–∏—Ç—å –∏ –≤—Å—ë –ø–æ–Ω—è—Ç—å!',
    'üíé –ú—É–¥—Ä–æ—Å—Ç—å –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ!',
    'üï∞Ô∏è –¢–µ—Ä–ø–µ–Ω–∏–µ –∏ —Ç—Ä—É–¥ –≤—Å—ë –ø–µ—Ä–µ—Ç—Ä—É—Ç!',
    'üå± –£—á–∏—Å—å –º–µ–¥–ª–µ–Ω–Ω–æ, –Ω–æ –≤–µ—Ä–Ω–æ!'
  ]
};

export default function HeroCharacter({ 
  type, 
  message, 
  onMessageChange, 
  size = 160,
  mirrored = false 
}: HeroCharacterProps) {
  const { isEditMode } = useEditMode();
  const [isHovered, setIsHovered] = useState(false);
  const [currentPhrase, setCurrentPhrase] = useState(message);
  const [phraseTimeout, setPhraseTimeout] = useState<NodeJS.Timeout | null>(null);

  const handleMouseEnter = () => {
    setIsHovered(true);
    
    if (phraseTimeout) {
      clearTimeout(phraseTimeout);
    }

    const phrases = motivationalPhrases[type];
    const randomPhrase = phrases[Math.floor(Math.random() * phrases.length)];
    setCurrentPhrase(randomPhrase);

    const timeout = setTimeout(() => {
      setCurrentPhrase(message);
    }, 5000);
    setPhraseTimeout(timeout);
  };

  const handleMouseLeave = () => {
    setIsHovered(false);
    if (phraseTimeout) {
      clearTimeout(phraseTimeout);
      setPhraseTimeout(null);
    }
    setTimeout(() => {
      setCurrentPhrase(message);
    }, 500);
  };

  const textColor = type === 'ant' ? 'text-green-700' : 'text-blue-700';
  const bgColor = type === 'ant' ? 'bg-green-50 border-green-200' : 'bg-blue-50 border-blue-200';

  return (
    <div 
      className={`hidden md:block group relative ${mirrored ? 'transform scale-x-[-1]' : ''}`}
      title={type === 'ant' ? '–ú—É—Ä–∞–≤—å–∏—à–∫–∞ –í–æ–ø—Ä–æ—Å–∏–∫' : '–ú—É–¥—Ä–∞—è –ß–µ—Ä–µ–ø–∞—Ö–∞'}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
    >
      <AnimatedCharacter 
        type={type} 
        animation={isHovered ? 'happy' : 'idle'} 
        size={size} 
      />
      
      <div 
        className={`absolute -top-20 left-1/2 -translate-x-1/2 ${bgColor} shadow-xl rounded-xl px-5 py-3 transition-all duration-300 whitespace-nowrap pointer-events-none z-10 border-2 ${
          isHovered ? 'opacity-100 scale-100' : 'opacity-0 scale-95'
        } ${mirrored ? 'scale-x-[-1]' : ''}`}
      >
        {isEditMode ? (
          <EditableContent
            initialValue={message}
            onSave={onMessageChange}
            as="p"
            className={`text-sm font-medium ${textColor}`}
          />
        ) : (
          <p className={`text-sm font-medium ${textColor} max-w-xs`}>
            {currentPhrase}
          </p>
        )}
        <div className={`absolute -bottom-2 left-1/2 -translate-x-1/2 w-4 h-4 ${bgColor.split(' ')[0]} border-r-2 border-b-2 ${bgColor.split(' ')[1]} rotate-45`} />
      </div>
    </div>
  );
}
